import tkinter as tk
from tkinter import messagebox
from PIL import Image, ImageTk
import automate_services  # ✅ Import automation module

def show_automate_services():
    """ ✅ Display service statuses in the GUI """
    for widget in automateservices_frame.winfo_children():
        widget.destroy()  # ✅ Clear old labels

    service_statuses = automate_services.check_all_services()  # ✅ Fetch service statuses

    # ✅ Display service names & statuses
    for i, (service, status) in enumerate(service_statuses.items()):
        tk.Label(automateservices_frame, text=service, font=("Arial", 10), anchor="w").grid(row=i, column=0, sticky="w", padx=5, pady=2)
        tk.Label(automateservices_frame, text=status, font=("Arial", 10), fg="green" if status == "Running" else "red").grid(row=i, column=1, padx=5, pady=2)

    # ✅ Buttons for stopping, starting, and disabling services
    stop_button = tk.Button(automateservices_frame, text="STOP ALL SERVICES", font=("Bold", 12), bg="red", fg="white", command=stop_automate_services)
    stop_button.grid(row=len(service_statuses) + 1, column=0, padx=5, pady=10)

    start_button = tk.Button(automateservices_frame, text="START ALL SERVICES", font=("Bold", 12), bg="green", fg="white", command=start_automate_services)
    start_button.grid(row=len(service_statuses) + 1, column=1, padx=5, pady=10)

    disable_button = tk.Button(automateservices_frame, text="DISABLE ALL SERVICES", font=("Bold", 12), bg="gray", fg="white", command=disable_automate_services)
    disable_button.grid(row=len(service_statuses) + 2, column=0, columnspan=2, padx=5, pady=10)

def stop_automate_services():
    """ ✅ Stop all running services """
    stopped_services, failed_services = automate_services.stop_all_services()

    if stopped_services:
        messagebox.showinfo("Services Stopped", f"Successfully stopped:\n" + "\n".join(stopped_services))
    if failed_services:
        messagebox.showwarning("Failed to Stop", f"Could not stop:\n" + "\n".join(failed_services))

    show_automate_services()

def start_automate_services():
    """ ✅ Start all stopped services """
    started_services, failed_services = automate_services.start_all_services()

    if started_services:
        messagebox.showinfo("Services Started", f"Successfully started:\n" + "\n".join(started_services))
    if failed_services:
        messagebox.showwarning("Failed to Start", f"Could not start:\n" + "\n".join(failed_services))

    show_automate_services()

def disable_automate_services():
    """ ✅ Disable all critical services """
    disabled_services, failed_services = automate_services.disable_all_services()

    if disabled_services:
        messagebox.showinfo("Services Disabled", f"Successfully disabled:\n" + "\n".join(disabled_services))
    if failed_services:
        messagebox.showwarning("Failed to Disable", f"Could not disable:\n" + "\n".join(failed_services))

    show_automate_services()

def automateservices_page():
    """ ✅ Show the automate services page """
    delete_pages()
    
    global automateservices_frame
    automateservices_frame = tk.Frame(main_frame)
    automateservices_frame.pack(pady=10, fill="both", expand=True)

    show_automate_services()

def delete_pages():
    """ ✅ Clears all previous page content """
    for frame in main_frame.winfo_children():
        frame.destroy()

def indicate(lb, page):
    hide_indicators()
    lb.config(bg='#158aff')
    delete_pages()
    page()

def hide_indicators():
    home_indicate.config(bg='#c3c3c3')
    automateservices_indicate.config(bg='#c3c3c3')

# GUI Setup
root = tk.Tk()
root.geometry('700x500')
root.title('CyberSecurity Audit Application')

# Sidebar container frame
sidebar_frame = tk.Frame(root, bg='#c3c3c3')

# Options Frame (for buttons)
options_frame = tk.Frame(sidebar_frame, bg='#c3c3c3', width=140, height=600)
options_frame.configure(width=140, height=600)

# Create indicators
home_indicate = tk.Label(options_frame, text='', bg='#c3c3c3')
home_indicate.grid(row=0, column=0, sticky="w", padx=5)

automateservices_indicate = tk.Label(options_frame, text='', bg='#c3c3c3')
automateservices_indicate.grid(row=1, column=0, sticky="w", padx=5)

options_frame.grid_columnconfigure(1, weight=1)

# Home Button
home_btn = tk.Button(
    options_frame, text='HOME', font=('Bold', 15),
    fg='#158aff', bd=0, bg='#c3c3c3', relief='flat',
    command=lambda: indicate(home_indicate, lambda: None)
)
home_btn.grid(row=0, column=1, sticky="ew", padx=10, pady=10)

# Automate Services Button
automateservices_btn = tk.Button(
    options_frame, text='AUTOMATE\nSERVICES', font=('Bold', 15),
    fg='#158aff', bd=0, bg='#c3c3c3', relief='flat',
    command=lambda: indicate(automateservices_indicate, automateservices_page)
)
automateservices_btn.grid(row=1, column=1, sticky="ew", padx=10, pady=10)

# Pack everything
options_frame.pack(fill="both", expand=False)
sidebar_frame.pack(side=tk.LEFT, fill="y")

# Main content area
main_frame = tk.Frame(root, highlightbackground='black', highlightthickness=2)
main_frame.pack(side=tk.LEFT, fill="both", expand=True)

root.mainloop()
